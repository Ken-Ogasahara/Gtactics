<!DOCTYPE html>
<html>
  <head>
    <title>Gtactics</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_pack_tag  'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <body  class="d-flex flex-column vh-100">
    <header class="shadow-sm">
      <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
          <a class="navbar-brand" href="/">
            <span>Gtactics</span>
          </a>
          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarNavDropdown">
            <ul class="navbar-nav ml-auto">
              <% if user_signed_in? %>
                <% if current_user.name == "admin" %>
                <li>
                  <%= link_to fields_path, method: :get, class: "nav-link text-light" do %>
                    <i class="fas fa-cog" style="color:white;"></i> フィールド設定
                  <% end %>
                </li>
                <% end %>

                <li>
                  <%= link_to destroy_user_session_path, method: :delete, class: "nav-link text-light" do %>
                    <i class="fas fa-sign-out-alt" style="color:white;"></i> ログアウト
                  <% end %>
                </li>
              <% else %>
                <li>
                  <%= link_to new_user_registration_path, method: :get, class: "nav-link text-light" do %>
                  <i class="fa fa-user-plus" style="color:white;"></i> 新規登録
                  <% end %>
                </li>
                <li>
                  <%= link_to new_user_session_path, method: :get, class: "nav-link text-light" do %>
                  <i class="fas fa-book-open" style="color:white;"></i> ログイン
                  <% end %>
                </li>
              <% end %>
            </ul>
          </div>
        </div>
      </nav>
    </header>

    <main>
    <% if flash[:notice] %>
      <p class="notice">
        <%= flash[:notice] %>
      </p>
    <% else %>
      <p class="notice"></p>
    <% end %>

    <%= yield %>
    </main>

    <footer>
      <div class="container mt-5">
        <div class="row">
          <div class="mx-auto">
            <p>CopyRight Infratop.inc</p>
          </div>
        </div>
      </div>
    </footer>

  <script>
  (function(){
  
      //要素の取得
      var elements = document.getElementsByClassName("drag-and-drop");
  
      //要素内のクリックされた位置を取得するグローバル（のような）変数
      var x;
      var y;
  
      //マウスが要素内で押されたとき、又はタッチされたとき発火
      for(var i = 0; i < elements.length; i++) {
          elements[i].addEventListener("mousedown", mdown, false);
          elements[i].addEventListener("touchstart", mdown, false);
      }
  
      //マウスが押された際の関数
      function mdown(e) {
  
          //クラス名に .drag を追加
          this.classList.add("drag");
  
          //タッチデイベントとマウスのイベントの差異を吸収
          if(e.type === "mousedown") {
              var event = e;
          } else {
              var event = e.changedTouches[0];
          }
  
          //要素内の相対座標を取得
          x = event.pageX - this.offsetLeft;
          y = event.pageY - this.offsetTop;
  
          //ムーブイベントにコールバック
          document.body.addEventListener("mousemove", mmove, false);
          document.body.addEventListener("touchmove", mmove, false);
      }
  
      //マウスカーソルが動いたときに発火
      function mmove(e) {
  
          //ドラッグしている要素を取得
          var drag = document.getElementsByClassName("drag")[0];
          
  
          //同様にマウスとタッチの差異を吸収
          if(e.type === "mousemove") {
              var event = e;
          } else {
              var event = e.changedTouches[0];
          }
  
          //フリックしたときに画面を動かさないようにデフォルト動作を抑制
          e.preventDefault();
  
          //マウスが動いた場所に要素を動かす
          drag.style.top = event.pageY - y + "px";
          drag.style.left = event.pageX - x + "px";
          friend_id = drag.getAttribute('value');
          document.getElementById(`${friend_id}_x_field`).value = event.pageX -x + "px";
          document.getElementById(`${friend_id}_y_field`).value = event.pageY -y + "px";
          
          //マウスボタンが離されたとき、またはカーソルが外れたとき発火
          drag.addEventListener("mouseup", mup, false);
          document.body.addEventListener("mouseleave", mup, false);
          drag.addEventListener("touchend", mup, false);
          document.body.addEventListener("touchleave", mup, false);
  
      }
  
      //マウスボタンが上がったら発火
      function mup(e) {
          var drag = document.getElementsByClassName("drag")[0];
  
          //ムーブベントハンドラの消去
          document.body.removeEventListener("mousemove", mmove, false);
          drag.removeEventListener("mouseup", mup, false);
          document.body.removeEventListener("touchmove", mmove, false);
          drag.removeEventListener("touchend", mup, false);
  
          //クラス名 .drag も消す
          drag.classList.remove("drag");
      }
  
  })();
  </script>
  </body>
</html>
